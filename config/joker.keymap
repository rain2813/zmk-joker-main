#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define SNIPER 6
#define MOUSE 5

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

&trackball_listener {
    scroller {
        layers = <MOUSE>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 10>,
            <&zip_xy_to_scroll_mapper>;
    };

    snipe {
        layers = <SNIPER>;
        input-processors = <&zip_xy_scaler 1 3>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 27>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
        };

        less_than {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        great_than {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <5 6>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <17 18>;
        };
    };

    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwery {
            bindings = <
&kp NUMBER_1  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PAGE_DOWN PG_UP>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;

            label = "Qwery";
        };

        Navi {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PAGE_DOWN PG_UP>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;

            label = "Navi";
        };

        Symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PAGE_DOWN PG_UP>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;

            label = "Symbol";
        };

        Modify {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Modify";
        };

        Flash {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Flash";
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Mouse";
        };

        Sniper {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Sniper";
        };

        Number {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Number";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        flash {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
